{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/employee/employee.component.ts","webpack:///src/app/employee/employee.component.html","webpack:///src/app/list-employees/list-employees.component.ts","webpack:///src/app/list-employees/list-employees.component.html","webpack:///src/app/product.pipe.ts","webpack:///src/app/product/product-detail/product-detail.component.ts","webpack:///src/app/product/product-detail/product-detail.component.html","webpack:///src/app/product/product.component.ts","webpack:///src/app/product/product.component.html","webpack:///src/app/product/product.guard.ts","webpack:///src/app/product/product.module.ts","webpack:///src/app/product/product.service.ts","webpack:///src/app/register/register.component.ts","webpack:///src/app/register/register.component.html","webpack:///src/app/shared/custom.validators.ts","webpack:///src/app/shared/employees.service.ts","webpack:///src/app/star/star.component.ts","webpack:///src/app/star/star.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","path","component","declarations","providers","bootstrap","EmployeeComponent","fb","validationMessages","fullName","required","minLength","maxLength","email","emailDomain","phone","formErrors","skillName","years","employeeForm","group","contactPreference","skills","valueChanges","subscribe","data","logValidationErrors","get","onContactPreferenceChange","selectedValue","phoneControl","setValidators","clearValidators","updateValueAndValidity","Object","controls","forEach","key","abstractControl","errorKey","errors","valid","touched","storeValues","ListEmployeesComponent","employees","_route","getEmployees","listEmployees","navigate","ProductPipe","str","character","replace","name","ProductDetailComponent","route","product_id","snapshot","paramMap","ProductComponent","productService","productsArray","productForm","product_name","price","rating","newProduct","push","getProducts","products","filter","product","indexOf","console","log","value","alert","filterProducts","appendProducts","ProductGuard","router","next","state","url","providedIn","ProductModule","forChild","canActivate","ProductService","http","API_URL","RegisterComponent","employeeService","validationMesages","emailGroup","matchEmail","cfmEmail","experience","proficiency","registerForm","validator","array","addSkillsGroup","getEdittedEmployee","employee","empName","i","removeAt","control","getEmployeeById","fetchedEmployee","setFormValue","patchValue","setControl","setSkills","formArray","skills1","JSON","parse","element","skill_name","mapValues","updateEmployee","s","submitRegisterForm","addNewSkill","CustomValidators","domain","substring","lastIndexOf","phoneNo","phoneLen","length","checkLength","Employees","error","ErrorEvent","post","headers","StarComponent","ratingClicked","emit","totalWidth","showRating","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'mantra';\n}\n","<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ProductComponent } from './product/product.component';\nimport { RouterModule } from '@angular/router';\nimport { ProductPipe } from './product.pipe';\nimport { StarComponent } from './star/star.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ProductDetailComponent } from './product/product-detail/product-detail.component';\nimport { ProductGuard } from './product/product.guard';\nimport { ProductModule } from './product/product.module';\nimport { EmployeeComponent } from './employee/employee.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RegisterComponent } from './register/register.component';\nimport { ListEmployeesComponent } from './list-employees/list-employees.component';\n\n@NgModule({\n  declarations: [AppComponent, EmployeeComponent, RegisterComponent, ListEmployeesComponent, ListEmployeesComponent],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ProductModule,\n    ReactiveFormsModule,\n    RouterModule.forRoot([\n      { path: 'employee', component: EmployeeComponent },\n      { path: 'register', component: RegisterComponent },\n      { path: 'list', component: ListEmployeesComponent },\n      { path: 'edit/:id', component: RegisterComponent }\n    ]),\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { CustomValidators } from '../shared/custom.validators';\n\n@Component({\n  selector: 'app-employee',\n  templateUrl: './employee.component.html',\n  styleUrls: ['./employee.component.scss'],\n})\nexport class EmployeeComponent implements OnInit {\n  constructor(private fb: FormBuilder) {}\n  employeeForm;\n\n  validationMessages = {\n    fullName: {\n      required: 'first Name is required',\n      minLength: 'firstname should be 2 min length',\n      maxLength: 'firstname should be 10 digit max length',\n    },\n    email: {\n      required: 'email is Required',\n      emailDomain: 'email domain should be abc.com',\n    },\n    phone: { required: 'phone is Required' },\n  };\n\n  formErrors = {\n    fullName: '',\n    email: '',\n    phone: '',\n    skillName: '',\n    years: '',\n  };\n\n  ngOnInit(): void {\n    this.employeeForm = this.fb.group({\n      fullName: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(2),\n          Validators.maxLength(10),\n        ],\n      ],\n      contactPreference: ['email'],\n      email: ['', [Validators.required, CustomValidators.emailDomain]],\n      phone: [''],\n      skills: this.fb.group({\n        skillName: ['', Validators.required],\n        years: ['', Validators.required],\n      }),\n    });\n    this.employeeForm.valueChanges.subscribe((data) => {\n      this.logValidationErrors(this.employeeForm);\n    });\n    this.employeeForm\n      .get('contactPreference')\n      .valueChanges.subscribe((data) => {\n        this.onContactPreferenceChange(data);\n      });\n  }\n\n  onContactPreferenceChange(selectedValue: string) {\n    const phoneControl = this.employeeForm.get('phone');\n    if (selectedValue === 'phone') {\n      phoneControl.setValidators(Validators.required);\n    } else {\n      phoneControl.clearValidators();\n    }\n    phoneControl.updateValueAndValidity();\n  }\n\n  logValidationErrors(group: FormGroup = this.employeeForm) {\n    Object.keys(group.controls).forEach((key: string) => {\n      const abstractControl = group.get(key);\n      if (abstractControl instanceof FormGroup) {\n        this.logValidationErrors(abstractControl);\n      } else {\n        this.formErrors[key] = '';\n        for (const errorKey in abstractControl.errors) {\n          if (errorKey && !abstractControl.valid && abstractControl.touched) {\n            if (this.validationMessages[key]) {\n              this.formErrors[key] +=\n                this.validationMessages[key][errorKey] + ' ';\n            }\n          }\n        }\n      }\n    });\n  }\n\n  storeValues() {\n    // this.logValidationErrors(this.employeeForm);\n  }\n}\n\n","<div class=\"red\">\n    <form [formGroup]=\"employeeForm\" (ngSubmit)=\"storeValues()\">\n        <div>\n            <label>Name</label>\n            <input type=\"text\" formControlName=\"fullName\" (blur)=\"logValidationErrors()\" />\n            <div class=\"has-errors\" *ngIf=\"formErrors.fullName\">{{formErrors.fullName}}</div>\n        </div>    \n\n\n        <div>\n            Email : <input type=\"radio\" value=\"email\" formControlName=\"contactPreference\" />\n            Phone : <input type=\"radio\" value=\"phone\" formControlName=\"contactPreference\" />\n        </div>\n\n        <div>\n            <label>email</label>\n            <input type=\"text\" formControlName=\"email\" (blur)=\"logValidationErrors()\" />\n            <div class=\"has-errors\" *ngIf=\"formErrors.email\">{{formErrors.email}}</div>\n        </div>\n\n        <div>\n            <label> Phone </label>\n            <input type=\"text\" formControlName=\"phone\" />\n            <div class=\"has-errors\" *ngIf=\"formErrors.phone\">{{formErrors.phone}}</div>\n        </div>\n\n\n        <ng-container formGroupName=\"skills\">\n            <div>\n                <label>skill Name</label>\n                <input type=\"text\" formControlName=\"skillName\" (blur)=\"logValidationErrors()\" />\n                <div class=\"has-errors\" *ngIf=\"formErrors.skillName\">{{formErrors.skillName}}</div>\n            </div>\n\n            <div>\n                <label>no of years</label>\n                <input type=\"text\" formControlName=\"years\" />\n            </div>\n        </ng-container>\n\n        {{this.employeeForm.value | json}}\n        <input type=\"submit\" value=\"save\" />\n    </form>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Employees } from '../shared/employees.service';\n\n@Component({\n  selector: 'app-list-employees',\n  templateUrl: './list-employees.component.html',\n  styleUrls: ['./list-employees.component.scss'],\n})\nexport class ListEmployeesComponent implements OnInit {\n  listEmployees;\n\n  constructor(private employees: Employees, private _route: Router) {}\n\n  ngOnInit(): void {\n    this.employees\n      .getEmployees()\n      .subscribe((listEmployees) => (this.listEmployees = listEmployees));\n  }\n  editEmployee(id: number) {\n    this._route.navigate(['/edit', id]);\n  }\n}\n","<p>list-employees works!</p>\n\n<table border=\"1\">\n    <tr>\n        <td>Name</td>\n        <td>Designation</td>\n        <td>salary</td>\n        <td>Action</td>\n    </tr>\n    <tr *ngFor=\"let employee of listEmployees\">\n        <td>{{employee.empName}}</td>\n        <td>{{employee.designation}}</td>\n        <td>{{employee.salary}}</td>\n        <td><input type=\"button\" value=\"edit\" (click)=\"editEmployee(employee.id)\" /></td>\n    </tr>\n</table>","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'product'\n})\nexport class ProductPipe implements PipeTransform {\n\n  transform(str: string, character: string): unknown {\n    // return value.slice(0, 4);\n    return str.replace(\"-\", \" \");\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-product-detail',\n  templateUrl: './product-detail.component.html',\n  styleUrls: ['./product-detail.component.scss']\n})\nexport class ProductDetailComponent implements OnInit {\n\n  constructor(private route:ActivatedRoute) { }\n\n  product_id= this.route.snapshot.paramMap.get('id');\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>product-detail works!</p>\n{{product_id}}\n\n<a [routerLink]=\"['/product']\">Back</a>","import { Component, OnInit } from '@angular/core';\nimport { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { take } from 'rxjs/operators';\nimport { ProductService } from './product.service';\n\n@Component({\n  selector: 'app-product',\n  templateUrl: './product.component.html',\n  styleUrls: ['./product.component.scss']\n})\nexport class ProductComponent implements OnInit {\n\n\n  productsArray=new FormArray([]);\n\n  \n  productForm= new FormGroup({\n    product_name: new FormControl('',[Validators.required]),\n    price: new FormControl('',[Validators.required]),\n    rating:new FormControl('',[Validators.required])\n  });\n\n  constructor(private productService:ProductService) { \n    this.productsArray.push(this.productForm);\n  }\n\n  appendProducts(){\n    this.productsArray.push(this.productForm);\n  }\n\n\n\n/* products=[{\n  name:'Apple-',\n  price:10,\n  rating:2\n},{\n  name:'Mango',\n  price:20,\n  rating:1\n}] */\n\nproducts;\nerrorMessage;\n  ngOnInit(): void {\n    this.productService.getProducts().\n    subscribe(products => {this.products = products})  \n  }\n\n  filterProducts(product_name){\n    this.products= this.products.filter((product)=> product.name.indexOf(product_name)!==-1)\n   /*  this.productService.getProducts().subscribe((products) => {\n      console.log(products);\n    }); */\n  }\n\n  newProduct={\n    name:'Banana-',\n    price:30,\n    rating:5\n  }\n\n  addProduct(){    \n    console.log(this.productForm.value);\n   this.products.push(this.productForm.value);\n  }\n\n  eventEmitted(value){\nalert(value);\n  }\n\n}\n","<select (change)=\"filterProducts($event.target.value)\">\n    <option>select Product</option>\n    <option *ngFor=\"let product of products\">{{product.product_name}}</option>\n</select>\n<div *ngIf=\"products\">\n    <table border=\"1\" cellpadding=\"0\" cellspacing=\"0\">\n        <tr>\n            <td>\n                Name\n            </td>\n            <td>price</td>\n            <td>Rating</td>\n            <td>Detail (Routing with parameters)</td>\n\n        </tr>\n        <tr *ngFor=\"let product of products\">\n            <td>{{product.product_name | product:'-'}}</td>\n            <td>{{product.price}}</td>\n            <td>\n                <app-star [rating]='product.rating' (ratingClicked)=\"eventEmitted($event)\"></app-star>\n            </td>\n            <td> <a [routerLink]=\"['/product-detail', product.id ]\">Product Detail</a></td>\n\n        </tr>\n    </table>\n</div>\n<div>\n    {{errorMessage?.statusText}}\n</div>\n<h2>Add Product</h2>\n\n<div *ngFor=\"let productsArr of productsArray.controls\">\n   \n        <form (ngSubmit)=\"addProduct()\">\n            <ng-container [formGroup]=\"productsArr\">\n            Name : <input type=\"text\" formControlName=\"product_name\" />\n            Price : <input type=\"text\" formControlName=\"price\" />\n            Rating : <input type=\"text\" formControlName=\"rating\" />\n            <input type=\"submit\" value=\"Save\" />\n            {{ productForm.value | json }}\n        </ng-container>\n        </form>\n   \n</div>\n\n <input type=\"button\" value=\"append\" (click)=\"appendProducts()\" /> \n\n<h2>Routing with parameters</h2>","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductGuard implements CanActivate {\n\n  constructor(private router: Router){\n\n  }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n   \n     const id=+next.url[1].path;\n      if(id==1){\n        this.router.navigate(['/product']);\n        return false;\n      }\n\n      return true;\n  }\n  \n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ProductComponent } from './product.component';\nimport { ProductDetailComponent } from './product-detail/product-detail.component';\nimport { ProductGuard } from './product.guard';\nimport { RouterModule } from '@angular/router';\nimport { ProductPipe } from '../product.pipe';\nimport { HttpClientModule } from '@angular/common/http';\nimport { StarComponent } from '../star/star.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    ProductComponent,\n    ProductDetailComponent,\n    StarComponent,\n    ProductPipe,\n  ],\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    RouterModule.forChild([\n      { path: 'product', component: ProductComponent },\n      {\n        path: 'product-detail/:id',\n        canActivate: [ProductGuard],\n        component: ProductDetailComponent,\n      },\n    ]),\n    FormsModule,\n    ReactiveFormsModule\n  ],\n})\nexport class ProductModule {}\n","import { Injectable } from '@angular/core';\n\nimport { HttpClient } from '@angular/common/http';\n\nimport { map, take } from 'rxjs/operators';\nimport { IProduct } from './product';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n\n  constructor(private http: HttpClient) { }\n\n  private API_URL=\"http://localhost/oshop/cart.php\";\n\n  getProducts(): Observable<IProduct[]>{\n    return this.http.get<IProduct[]>(this.API_URL);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormArray,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { CustomValidators } from '../shared/custom.validators';\nimport { Employees } from '../shared/employees.service';\nimport { IEmployee } from '../shared/IEmployee';\nimport { ISkills } from '../shared/ISkills';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss'],\n})\nexport class RegisterComponent implements OnInit {\n  constructor(\n    private fb: FormBuilder,\n    private route: ActivatedRoute,\n    private employeeService: Employees\n  ) {}\n\n  employee: IEmployee;\n\n  registerForm: FormGroup;\n\n  validationMesages = {\n    name: {\n      required: 'Name should no be blank',\n    },\n    emailGroup: {\n      matchEmail: 'email and confirm email should be same',\n    },\n    email: {\n      required: 'email should no be blank',\n    },\n    cfmEmail: {\n      required: 'Confirm email should no be blank',\n    },\n    skillName: {\n      required: 'Skill Name is Required',\n    },\n    experience: {\n      required: 'Experience is Required',\n    },\n    proficiency: {\n      required: 'proficiency is Required',\n    },\n  };\n\n  formErrors = {\n    name: '',\n    emailGroup: '',\n    email: '',\n    cfmEmail: '',\n    skillName: '',\n    experience: '',\n    proficiency: '',\n  };\n\n  ngOnInit(): void {\n    this.registerForm = this.fb.group({\n      name: ['', Validators.required],\n      emailGroup: this.fb.group(\n        {\n          email: ['', Validators.required],\n          cfmEmail: ['', Validators.required],\n        },\n        { validator: CustomValidators.matchEmail }\n      ),\n      skills: this.fb.array([this.addSkillsGroup()]),\n    });\n    /*  this.registerForm.valueChanges.subscribe((data) => {\n      this.logValidationErrors(this.registerForm);\n    }); */\n    this.getEdittedEmployee();\n    this.employee = {\n      empName: '',\n      email: '',\n      skills: [],\n    };\n  }\n\n  addSkillsGroup(): FormGroup {\n    return this.fb.group({\n      skillName: ['', Validators.required],\n      experience: ['', Validators.required],\n      proficiency: ['', Validators.required],\n    });\n  }\n\n  addNewSkill() {\n    (<FormArray>this.registerForm.get('skills')).push(this.addSkillsGroup());\n  }\n\n  removeSkills(i): void {\n    (<FormArray>this.registerForm.get('skills')).removeAt(i);\n  }\n\n  logValidationErrors(group: FormGroup = this.registerForm) {\n    Object.keys(group.controls).forEach((key: string) => {\n      const abstractControl = group.get(key);\n\n      this.formErrors[key] = '';\n      for (const errorKey in abstractControl.errors) {\n        if (errorKey && abstractControl.touched) {\n          if (this.validationMesages[key]) {\n            this.formErrors[key] += this.validationMesages[key][errorKey] + ' ';\n          }\n        }\n      }\n\n      if (abstractControl instanceof FormGroup) {\n        this.logValidationErrors(abstractControl);\n      }\n\n      if (abstractControl instanceof FormArray) {\n        for (const control of abstractControl.controls) {\n          if (control instanceof FormGroup) {\n            this.logValidationErrors(control);\n          }\n        }\n      }\n    });\n  }\n\n  getEdittedEmployee() {\n    const id = this.route.snapshot.paramMap.get('id');\n    this.employeeService\n      .getEmployeeById(id)\n      .subscribe((fetchedEmployee: IEmployee) => {\n        // console.log('===', fetchedEmployee[0].email);\n        this.setFormValue(fetchedEmployee);\n      });\n  }\n\n  setFormValue(fetchedEmployee: IEmployee) {\n    this.registerForm.patchValue({\n      name: fetchedEmployee[0].empName,\n      emailGroup: {\n        email: fetchedEmployee[0].email,\n        cfmEmail: fetchedEmployee[0].email,\n      },\n    });\n\n    this.registerForm.setControl(\n      'skills',\n      this.setSkills(fetchedEmployee[0].skills)\n    );\n  }\n\n  setSkills(skills): FormArray {\n    const formArray = new FormArray([]);\n    // console.log('skills===', skills);\n    const skills1 = JSON.parse(skills);\n\n    skills1.forEach((element) => {\n      formArray.push(\n        this.fb.group({\n          skillName: element.skill_name,\n          experience: element.experience,\n          proficiency: element.proficiency,\n        })\n      );\n    });\n\n    return formArray;\n  }\n\n  submitRegisterForm() {\n    // console.log(this.registerForm);\n    this.mapValues(this.registerForm);\n    this.employeeService.updateEmployee(this.employee).subscribe((s) => {});\n  }\n\n  mapValues(registerForm) {\n    // console.log(registerForm.value.name);\n    this.employee.empName = registerForm.value.name;\n    this.employee.skills = registerForm.value.skills;\n  }\n}\n","<div class=\"container\">\n    <form [formGroup]=\"registerForm\" id=\"form_login\" (ngSubmit)=\"submitRegisterForm()\">\n        <div class=\"form-control\">\n            <label>Name</label>\n            <input type=\"text\" formControlName=\"name\" (blur)=\"logValidationErrors()\"  />\n            <div *ngIf=\"formErrors.name\">{{formErrors.name}}</div>\n        </div>\n\n        <ng-container formGroupName=\"emailGroup\">\n            <div class=\"form-control\">\n                <label>Email</label>\n                <input type=\"text\" formControlName=\"email\" (blur)=\"logValidationErrors()\" />\n                <div *ngIf=\"formErrors.email\">{{formErrors.email}}</div>\n            </div>\n            <div class=\"form-control\">\n                <label>Confirm Email</label>\n                <input type=\"text\" formControlName=\"cfmEmail\" (blur)=\"logValidationErrors()\" />\n                <div *ngIf=\"formErrors.cfmEmail || formErrors.emailGroup\">\n                    {{formErrors.cfmEmail?formErrors.cfmEmail:formErrors.emailGroup}}</div>\n            </div>\n        </ng-container>\n\n        <input type=\"button\" (click)=\"addNewSkill()\" value=\"Add Skills\"\n            [ngClass]=\"{'btn-disabled':registerForm.get('skills').invalid}\" />\n\n        <ng-container formArrayName=\"skills\" *ngFor=\"let skill of registerForm.get('skills')['controls']; let i=index\">\n            <div [formGroupName]=\"i\" class=\"add-skills\">\n\n                <div class=\"form-control\">\n                    <label [attr.for]=\"'skillName'+i\">Skill</label>\n                    <input type=\"text\" formControlName=\"skillName\" [id]=\"'skillName'+i\" />\n                    <div *ngIf=\"skill.get('skillName').errors?.required\">\n                        SkillName is Required</div>\n                </div>\n\n                <div class=\"form-control\">\n                    <label>Experience</label>\n                    <input type=\"text\" formControlName=\"experience\" [id]=\"'experience'+i\" />\n                    <div *ngIf=\"skill.get('experience').errors?.required\">\n                        Experience is Required</div>\n                </div>\n\n                <div class=\"form-control\">\n                    <label>Proficiency</label>\n                    <div>\n                        <input type=\"radio\" formControlName=\"proficiency\" value=\"Beginner\" />\n                        Beginner\n                        <input type=\"radio\" formControlName=\"proficiency\" value=\"intermediate\" /> intermediate\n                        <input type=\"radio\" formControlName=\"proficiency\" value=\"Advanced\" />\n                        Advanced\n                        <div *ngIf=\"skill.get('proficiency').errors?.required\">\n                            Proficiency is Required</div>\n                    </div>\n                </div>\n\n                <div *ngIf=\"registerForm.get('skills')?.length>1\">\n                    <input type=\"button\" value=\"remove\" (click)=\"removeSkills(i)\" />\n                </div>\n            </div>\n        </ng-container>\n        <div>\n            <input type=\"submit\" value=\"Submit\" [ngClass]=\"{'btn-disabled':!registerForm.valid}\" />\n        </div>\n\n\n    </form>\n\n</div>","import { AbstractControl, FormGroup } from '@angular/forms';\r\n\r\nexport class CustomValidators {\r\n  static emailDomain(control: AbstractControl): { [key: string]: any } | null {\r\n    const email = control.value;\r\n    const domain = email.substring(email.lastIndexOf('@') + 1);\r\n    if (domain === 'abc.com' || email === '') {\r\n      return null;\r\n    } else {\r\n      return { emailDomain: true };\r\n    }\r\n  }\r\n\r\n  static matchEmail(group: AbstractControl): { [key: string]: any } | null {\r\n    const email = group.get('email').value;\r\n    const cfmEmail = group.get('cfmEmail').value;\r\n    if (email === cfmEmail) {\r\n      return null;\r\n    } else {\r\n      return { matchEmail: true };\r\n    }\r\n  }\r\n  static checkLength(control: AbstractControl): { [key: string]: any } | null {\r\n    const phoneNo = control.value;\r\n    const phoneLen = phoneNo.length;\r\n    if (phoneLen > 4) {\r\n      return { checkLength: true };\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","import {\r\n  HttpClient,\r\n  HttpClientModule,\r\n  HttpErrorResponse,\r\n  HttpHeaders,\r\n} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { IEmployee } from './IEmployee';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class Employees {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  private API_URL = 'http://localhost/oshop/employee.php';\r\n\r\n  getEmployees(): Observable<IEmployee> {\r\n    return this.http.get<IEmployee>(this.API_URL);\r\n  }\r\n  handleError(error: HttpErrorResponse) {\r\n    if (error instanceof ErrorEvent) {\r\n      console.log('error=', error);\r\n    } else {\r\n      console.log('service error');\r\n    }\r\n  }\r\n\r\n  getEmployeeById(id): Observable<IEmployee> {\r\n    return this.http.get<IEmployee>(this.API_URL + '?id=' + id);\r\n  }\r\n\r\n  updateEmployee(employee: IEmployee) {\r\n    // console.log('sahil=', employee.empName);\r\n    return this.http.post<IEmployee>(this.API_URL + '?id=1', employee, {\r\n      headers: new HttpHeaders({\r\n        'content-type': 'application/json',\r\n      }),\r\n    });\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, OnInit, Output,EventEmitter } from '@angular/core';\n\n\n@Component({\n  selector: 'app-star',\n  templateUrl: './star.component.html',\n  styleUrls: ['./star.component.scss']\n})\nexport class StarComponent implements OnInit,OnChanges {\n\n  @Input() rating:number;\n\n  @Output() ratingClicked : EventEmitter<string> = new EventEmitter<string>();\n\n  totalWidth:number; \n\n  constructor() { }\n  ngOnInit(): void {\n    \n  }\n\n  showRating(){\n    this.ratingClicked.emit(`rating id ${this.rating}`);\n  }\n\n  ngOnChanges(){\n    this.totalWidth=(this.rating*75)/5;\n  }\n\n}\n","<div [style.width.px]=\"totalWidth\" class=\"crop\">\n    <div style=\"width:75px\" (click)=\"showRating()\">\n    <span class=\"fa fa-star\"></span>\n    <span class=\"fa fa-star\"></span>\n    <span class=\"fa fa-star\"></span>\n    <span class=\"fa fa-star\"></span>\n    <span class=\"fa fa-star\"></span>\n</div>\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}